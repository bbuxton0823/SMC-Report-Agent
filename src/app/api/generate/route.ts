import { NextRequest, NextResponse } from 'next/server';
import { OPENAI_API_KEY, DEFAULT_MODEL } from '@/lib/env';

export async function POST(request: NextRequest) {
  try {
    // Check if API key is available
    if (!OPENAI_API_KEY) {
      return NextResponse.json(
        { error: 'OpenAI API key is not configured' },
        { status: 500 }
      );
    }

    // Parse request body
    const body = await request.json();
    const { 
      writingStyleFiles, 
      policyDocuments, 
      reportType,
      reportDescription, 
      dataFiles, 
      selectedModel = DEFAULT_MODEL, 
      performancePreference 
    } = body;

    // Validate required fields
    if (!reportType) {
      return NextResponse.json(
        { error: 'Missing required fields' },
        { status: 400 }
      );
    }

    // In a real implementation, you would:
    // 1. Process the uploaded files
    // 2. Extract text from writing style samples
    // 3. Extract text from policy documents
    // 4. Parse data files
    // 5. Call OpenAI API with the processed data

    // For now, we'll simulate the API call
    console.log('Generating report with:', {
      reportType,
      reportDescription,
      selectedModel,
      performancePreference,
      writingStyleCount: writingStyleFiles?.length || 0,
      policyDocumentsCount: policyDocuments?.length || 0,
      dataFilesCount: dataFiles?.length || 0,
    });

    // Simulate API delay
    await new Promise(resolve => setTimeout(resolve, 1000));

    // Return a sample report
    return NextResponse.json({
      content: `
        <h1>${reportType.charAt(0).toUpperCase() + reportType.slice(1)} Business Report</h1>
        <p>This report was generated using the ${selectedModel} model with a performance preference of ${performancePreference}%.</p>
        ${reportDescription ? `<h2>User Requirements</h2><p>${reportDescription}</p>` : ''}
        <p>Writing style samples: ${writingStyleFiles?.length || 0} files</p>
        <p>Policy documents: ${policyDocuments?.length || 0} files</p>
        <p>Data files for analysis: ${dataFiles?.length || 0} files</p>
        <h2>Executive Summary</h2>
        <p>This is a sample report generated based on your inputs. In a real implementation, this would be generated by the selected AI model using your writing style, policy documents, and data.</p>
        <h2>Key Findings</h2>
        <ul>
          <li>Finding 1: Lorem ipsum dolor sit amet</li>
          <li>Finding 2: Consectetur adipiscing elit</li>
          <li>Finding 3: Sed do eiusmod tempor incididunt</li>
        </ul>
        <p>You can edit this content in the canvas editor.</p>
      `
    });
  } catch (error) {
    console.error('Error generating report:', error);
    return NextResponse.json(
      { error: 'Failed to generate report' },
      { status: 500 }
    );
  }
} 